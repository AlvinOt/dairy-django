# Generated by Django 4.2.13 on 2024-06-16 02:13

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('tag_number', models.CharField(max_length=50, unique=True)),
                ('breed', models.CharField(max_length=100)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], max_length=10)),
                ('weight', models.DecimalField(decimal_places=2, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('weight_timestamp', models.DateTimeField(auto_now=True)),
                ('health_status', models.CharField(max_length=100)),
                ('lactation_status', models.CharField(max_length=100)),
                ('last_milking_date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Farm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True)),
                ('location', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, max_length=255)),
                ('slogan', models.CharField(blank=True, help_text='Farm motto', max_length=255, null=True)),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('ACT', 'Active'), ('INA', 'Inactive')], default='INA', max_length=3)),
                ('verified', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='farm_users', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('farm', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='farm.farm')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='farm.role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='farm.user')),
            ],
            options={
                'unique_together': {('user', 'role', 'farm')},
            },
        ),
        migrations.AddField(
            model_name='user',
            name='roles',
            field=models.ManyToManyField(through='farm.UserRole', to='farm.role'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='farm_users', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='MilkingSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('barn', models.CharField(max_length=100)),
                ('milking_start_time', models.DateTimeField()),
                ('milking_end_time', models.DateTimeField()),
                ('milking_duration', models.DurationField()),
                ('milk_yield', models.DecimalField(decimal_places=2, max_digits=6)),
                ('milking_equipment_used', models.TextField()),
                ('cow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='farm.cow')),
            ],
        ),
        migrations.CreateModel(
            name='Invitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_accepted', models.BooleanField(default=False)),
                ('farm', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='farm.farm')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='farm.role')),
            ],
        ),
        migrations.CreateModel(
            name='HealthRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('health_issue', models.CharField(max_length=100)),
                ('treatment', models.TextField()),
                ('treatment_date', models.DateField()),
                ('notes', models.TextField()),
                ('cow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='farm.cow')),
                ('veterinarian', models.ForeignKey(limit_choices_to={'roles__name': 'Vet'}, on_delete=django.db.models.deletion.CASCADE, to='farm.user')),
            ],
        ),
        migrations.AddField(
            model_name='farm',
            name='users',
            field=models.ManyToManyField(related_name='farms', through='farm.UserRole', to='farm.user'),
        ),
        migrations.AddField(
            model_name='cow',
            name='farm',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='farm.farm'),
        ),
        migrations.CreateModel(
            name='CalvingRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calving_date', models.DateField()),
                ('calf_details', models.TextField()),
                ('birthing_complications', models.TextField(blank=True, null=True)),
                ('cow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='farm.cow')),
            ],
        ),
        migrations.CreateModel(
            name='BreedingRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('breeding_method', models.CharField(choices=[('AI', 'Artificial Insemination'), ('Natural', 'Natural Mating')], max_length=100)),
                ('mating_bull', models.CharField(max_length=100)),
                ('mating_date', models.DateField()),
                ('expected_calving_date', models.DateField()),
                ('pregnancy_status', models.CharField(max_length=100)),
                ('cow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='farm.cow')),
            ],
        ),
        migrations.CreateModel(
            name='ApprovalRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='PENDING', max_length=10)),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('decision_date', models.DateTimeField(blank=True, null=True)),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='farm.farm')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='farm.role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='farm.user')),
            ],
        ),
    ]
